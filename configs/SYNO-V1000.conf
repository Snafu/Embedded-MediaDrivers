export MAKEFLAGS=${MAKEFLAGS:--j`nproc`}

PACKAGE_NAME=SYNO-V1000
PACKAGE_CODE=SYNOV1000

KERNEL_URI="https://global.synologydownload.com/download/ToolChain/Synology%20NAS%20GPL%20Source/7.2-72806/v1000/linux-4.4.x.txz"
KERNEL_LOCATION=${KERNEL_URI//*\//}
KERNEL_MD5=

TOOLCHAIN_URI="https://global.synologydownload.com/download/ToolChain/toolchain/7.2-72806/Intel%20x86%20Linux%204.4.302%20%28V1000%29/v1000-gcc1220_glibc236_x86_64-GPL.txz"
TOOLCHAIN_LOCATION=${TOOLCHAIN_URI//*\//}
TOOLCHAIN_MD5=

EXTRAS_LOCATION=

function SYNOV1000_ENVIRONMENT {
	echo "custom environment"

	mkdir -p ${TOP_MDB_DIR}/build/${PACKAGE_CODE}
	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}
	
	mkdir -p ${TOP_MDB_DIR}/dl/${PACKAGE_NAME}

	if [ ! -d "x86_64-pc-linux-gnu" ] ; then
		echo "* downloading toolchain"
	  wget -O "${TOP_MDB_DIR}/dl/${PACKAGE_NAME}/${TOOLCHAIN_LOCATION}" "${TOOLCHAIN_URI}"
		tar xf ${TOP_MDB_DIR}/dl/${PACKAGE_NAME}/${TOOLCHAIN_LOCATION}
		chmod -R +w ${TOP_MDB_DIR}/build/${PACKAGE_CODE}/
	fi

	export PATH=${TOP_MDB_DIR}/build/${PACKAGE_CODE}/x86_64-pc-linux-gnu/bin:$PATH
	export CROSS_COMPILE=x86_64-pc-linux-gnu-
}

function SYNOV1000_KERNEL_CONFIGURE {
	echo "custom kernel configure func"
	mkdir -p ${TOP_MDB_DIR}/build/${PACKAGE_CODE}
	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}

	if [ ! -d "${KERNEL_LOCATION/.txz/}" ] ; then
		echo "* downloading kernel"
	  wget -O "${TOP_MDB_DIR}/dl/${PACKAGE_NAME}/${KERNEL_LOCATION}" "${KERNEL_URI}"
		tar xf ${TOP_MDB_DIR}/dl/${PACKAGE_NAME}/${KERNEL_LOCATION}
	fi

	for i in ${EXTRAS_LOCATION} ; do
		if [ ! -d "${i/txz}" ] ; then
			tar xf ${TOP_MDB_DIR}/dl/${PACKAGE_NAME}/${i}
		fi
	done

	cd "${KERNEL_LOCATION/.txz/}"
	if [ -d "${TOP_MDB_DIR}/board/${PACKAGE_NAME}/kernel_patches/" -a ! -f .flag_patched ] ; then
		for i in ${TOP_MDB_DIR}/board/${PACKAGE_NAME}/kernel_patches/*patch ; do
			patch -p1 < ${i}
		done
		touch .flag_patched
	fi

	cp synoconfigs/v1000 .config
	make olddefconfig
}

function SYNOV1000_KERNEL_BUILD {
	echo "custom kernel build func";

	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}
	if [ ! -d "${KERNEL_LOCATION/.txz/}" ] ; then
		SYNOV1000_KERNEL_CONFIGURE
	fi

	cd "${TOP_MDB_DIR}/build/${PACKAGE_CODE}/${KERNEL_LOCATION/.txz/}"

	make modules CC=${CROSS_COMPILE}gcc
}

function SYNOV1000_KERNEL_CLEAN {
	echo "custom kernel clean func";

	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}
	if [ ! -d "${KERNEL_LOCATION/.txz/}" ] ; then
		SYNOV1000_KERNEL_CONFIGURE
	fi

	cd "${TOP_MDB_DIR}/build/${PACKAGE_CODE}/${KERNEL_LOCATION/.txz/}"

	make clean
}

function SYNOV1000_MEDIA_CONFIGURE {
	echo "custom media configure func";
	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}

	if [ ! -d media_build ] ; then
		git clone git://linuxtv.org/media_build.git
		git -C media_build checkout --force 0fe857b86addf382f6fd383948bd7736a3201403 >/dev/null
	fi

	if [ -f ${TOP_MDB_DIR}/board/${PACKAGE_NAME}/media_build/config-mycompat.h ] ; then
		cp ${TOP_MDB_DIR}/board/${PACKAGE_NAME}/media_build/config-mycompat.h media_build/v4l
	fi

	cd media_build

	if [ -d "${TOP_MDB_DIR}/board/${PACKAGE_NAME}/media_build/" -a ! -f .flag_patched ] ; then
		for i in ${TOP_MDB_DIR}/board/${PACKAGE_NAME}/media_build/*patch ; do
			patch -p1 < ${i}
		done
		touch .flag_patched
	fi


	# Prevent updating repo 
	sed -i 's/git pull .*media_build.git master/echo \0/' build

	make release DIR=${TOP_MDB_DIR}/build/${PACKAGE_CODE}/${KERNEL_LOCATION/.txz/}
}

function SYNOV1000_MEDIA_BUILD {
	echo "custom media build func";

	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}
	if [ ! -d "media_build" ] ; then
		SYNOV1000_MEDIA_CONFIGURE
	fi

	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}/media_build

	./build && make install
}

function SYNOV1000_MEDIA_CLEAN {
	echo "custom media clean func";
	cd ${TOP_MDB_DIR}/build/${PACKAGE_CODE}/media_build
	make rminstall
	make clean
}
